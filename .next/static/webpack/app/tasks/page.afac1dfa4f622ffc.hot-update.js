"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/tasks/page",{

/***/ "(app-pages-browser)/./src/contexts/UserContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/UserContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserProvider: function() { return /* binding */ UserProvider; },\n/* harmony export */   useUser: function() { return /* binding */ useUser; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! swr */ \"(app-pages-browser)/./node_modules/swr/dist/index/index.mjs\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ UserProvider,useUser auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst UserContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    user: null,\n    loading: false,\n    error: null,\n    mutate: async ()=>{}\n});\nconst INITIAL_SPIN_ENERGY = 1200;\n// Admin ID for reference\nconst ADMIN_ID = \"7093793454\" || 0;\nfunction UserProvider(param) {\n    let { children } = param;\n    _s();\n    const [telegramUserId, setTelegramUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Extract Telegram user ID when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const getTelegramUser = ()=>{\n            try {\n                console.log(\"Attempting to get Telegram user ID...\");\n                // Check if we're in the Telegram WebApp environment\n                if ( true && window.Telegram) {\n                    console.log(\"Telegram WebApp detected\");\n                    // Try to get user from Telegram WebApp\n                    try {\n                        // Use type assertion to access potentially undefined properties\n                        const webApp = window.Telegram.WebApp;\n                        if (webApp && webApp.initDataUnsafe && webApp.initDataUnsafe.user) {\n                            const webAppUser = webApp.initDataUnsafe.user;\n                            if (webAppUser && webAppUser.id) {\n                                const userId = String(webAppUser.id);\n                                console.log(\"Found Telegram user from WebApp:\", userId);\n                                return userId;\n                            }\n                        }\n                    } catch (e) {\n                        console.error(\"Error accessing Telegram WebApp data:\", e);\n                    }\n                    // If we can't get the user from WebApp, try to parse it from the URL\n                    const tgWebAppData = new URLSearchParams(window.location.search).get(\"tgWebAppData\");\n                    if (tgWebAppData) {\n                        try {\n                            // Try to extract user_id from tgWebAppData\n                            const decodedData = decodeURIComponent(tgWebAppData);\n                            const userMatch = decodedData.match(/\"id\":(\\d+)/);\n                            if (userMatch && userMatch[1]) {\n                                const userId = userMatch[1];\n                                console.log(\"Found Telegram user from tgWebAppData:\", userId);\n                                return userId;\n                            }\n                        } catch (e) {\n                            console.error(\"Error parsing tgWebAppData:\", e);\n                        }\n                    }\n                }\n                // Check URL parameters as fallback\n                if (true) {\n                    const urlParams = new URLSearchParams(window.location.search);\n                    const userIdFromUrl = urlParams.get(\"user_id\") || urlParams.get(\"id\");\n                    if (userIdFromUrl) {\n                        console.log(\"Found user_id in URL:\", userIdFromUrl);\n                        return userIdFromUrl;\n                    }\n                    // Try to get user_id from hash\n                    const hash = window.location.hash;\n                    const hashParams = new URLSearchParams(hash.substring(1));\n                    const userIdFromHash = hashParams.get(\"user_id\") || hashParams.get(\"id\");\n                    if (userIdFromHash) {\n                        console.log(\"Found user_id in hash:\", userIdFromHash);\n                        return userIdFromHash;\n                    }\n                    // Try to get from localStorage (if previously saved)\n                    const savedUserId = localStorage.getItem(\"telegram_user_id\");\n                    if (savedUserId) {\n                        console.log(\"Found user_id in localStorage:\", savedUserId);\n                        return savedUserId;\n                    }\n                }\n                // For development/testing only - DO NOT use in production\n                if (true) {\n                    console.log(\"Development environment detected, using test user ID\");\n                    const testId = localStorage.getItem(\"test_user_id\") || \"test_user\";\n                    localStorage.setItem(\"test_user_id\", testId);\n                    return testId;\n                }\n                console.warn(\"No Telegram user ID found. This should only happen in development.\");\n                return null;\n            } catch (error) {\n                console.error(\"Error getting Telegram user:\", error);\n                return null;\n            }\n        };\n        const userId = getTelegramUser();\n        if (userId) {\n            setTelegramUserId(userId);\n            // Save to localStorage for persistence\n            if (true) {\n                localStorage.setItem(\"telegram_user_id\", userId);\n            }\n            console.log(\"Set Telegram user ID:\", userId);\n        } else {\n            console.error(\"Failed to get a valid user ID\");\n        }\n    }, []);\n    const { data: user, error, isLoading, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(telegramUserId ? [\n        \"user\",\n        telegramUserId\n    ] : null, async (param)=>{\n        let [_, userId] = param;\n        try {\n            console.log(\"Fetching user data for ID:\", userId);\n            // First, check if user exists\n            const { data: existingUser, error: fetchError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").select(\"*\").eq(\"user_id\", userId).single();\n            console.log(\"Existing user data:\", existingUser);\n            if (fetchError) {\n                if (fetchError.code === \"PGRST116\") {\n                    console.log(\"User not found, creating new user...\");\n                    // Create new user with initial spin energy\n                    const { data: newUser, error: createError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").insert({\n                        user_id: userId,\n                        telegram_id: userId,\n                        balance: 0,\n                        solana_balance: 0,\n                        energy: 1200,\n                        spin_energy: INITIAL_SPIN_ENERGY,\n                        last_spin_energy_reset: new Date().toISOString(),\n                        level: \"1\",\n                        is_admin: userId === ADMIN_ID,\n                        mining_equipment: {},\n                        mining_rate: 0 // Initialize mining rate to 0\n                    }).select().single();\n                    if (createError) {\n                        console.error(\"Error creating new user:\", createError);\n                        throw createError;\n                    }\n                    console.log(\"New user created:\", newUser);\n                    return newUser;\n                }\n                throw fetchError;\n            }\n            // If user exists but has no telegram_id, update it\n            if (existingUser && !existingUser.telegram_id) {\n                console.log(\"Updating user with telegram_id...\");\n                const { data: updatedUser, error: updateError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").update({\n                    telegram_id: userId\n                }).eq(\"user_id\", userId).select().single();\n                if (updateError) {\n                    console.error(\"Error updating user telegram_id:\", updateError);\n                } else {\n                    console.log(\"User updated with telegram_id:\", updatedUser);\n                    existingUser.telegram_id = userId;\n                }\n            }\n            // If user exists but has no spin energy, update them\n            if (existingUser && (existingUser.spin_energy === undefined || existingUser.spin_energy === null || existingUser.spin_energy === 0)) {\n                console.log(\"Updating user with spin energy...\");\n                const { data: updatedUser, error: updateError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").update({\n                    spin_energy: INITIAL_SPIN_ENERGY,\n                    last_spin_energy_reset: new Date().toISOString()\n                }).eq(\"user_id\", userId).select().single();\n                if (updateError) {\n                    console.error(\"Error updating user:\", updateError);\n                    throw updateError;\n                }\n                console.log(\"User updated with spin energy:\", updatedUser);\n                return updatedUser;\n            }\n            // Check if energy needs to be reset (12 hours passed)\n            if (existingUser.last_spin_energy_reset) {\n                const lastReset = new Date(existingUser.last_spin_energy_reset);\n                const now = new Date();\n                const hoursSinceReset = (now.getTime() - lastReset.getTime()) / (1000 * 60 * 60);\n                if (hoursSinceReset >= 12) {\n                    console.log(\"Resetting spin energy after 12 hours...\");\n                    const { data: resetUser, error: resetError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").update({\n                        spin_energy: INITIAL_SPIN_ENERGY,\n                        last_spin_energy_reset: now.toISOString()\n                    }).eq(\"user_id\", userId).select().single();\n                    if (resetError) {\n                        console.error(\"Error resetting energy:\", resetError);\n                        throw resetError;\n                    }\n                    console.log(\"Energy reset complete:\", resetUser);\n                    return resetUser;\n                }\n            }\n            // Ensure is_admin is correctly set\n            if (existingUser.is_admin === true && userId !== ADMIN_ID) {\n                console.log(\"Fixing incorrect admin status for user:\", userId);\n                const { data: fixedUser, error: fixError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from(\"users\").update({\n                    is_admin: userId === ADMIN_ID\n                }).eq(\"user_id\", userId).select().single();\n                if (fixError) {\n                    console.error(\"Error fixing admin status:\", fixError);\n                } else if (fixedUser) {\n                    console.log(\"Admin status fixed for user:\", fixedUser);\n                    return fixedUser;\n                }\n            }\n            return existingUser;\n        } catch (error) {\n            console.error(\"Error in user data fetching:\", error);\n            throw error;\n        }\n    }, {\n        revalidateOnFocus: false,\n        revalidateOnReconnect: false,\n        refreshInterval: 60000\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(UserContext.Provider, {\n        value: {\n            user,\n            loading: isLoading,\n            error,\n            mutate\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/sauravlamichhane/Downloads/Musky-master/src/contexts/UserContext.tsx\",\n        lineNumber: 300,\n        columnNumber: 5\n    }, this);\n}\n_s(UserProvider, \"/iEAPaFT06pkzI2vqU2cafQJ2aU=\", false, function() {\n    return [\n        swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n    ];\n});\n_c = UserProvider;\nfunction useUser() {\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(UserContext);\n}\n_s1(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/UserContext.tsx\n"));

/***/ })

});